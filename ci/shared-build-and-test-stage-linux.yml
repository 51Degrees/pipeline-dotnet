parameters:
- name: stageName # Name of the stage.
- name: imageName # Name of the agent to work on.
- name: nugetVersion
  type: string
  default: 6.0.3
- name: runTests
  type: string
  default: 'On'

stages:
- stage: ${{ parameters.stageName }}
  dependsOn: []

  jobs:
  - job: Build_and_Test
    displayName: Build and Test
    condition: ne(${{ parameters.runTests }}, 'Off')

    pool:
      vmImage: ${{ parameters.imageName }}
  
    # Configure this to run for both Debug and Release configurations
    strategy:
      maxParallel: 2
      matrix:
        debug:
          BuildConfiguration: LinuxDebug
        release:
          BuildConfiguration: LinuxRelease 
    
    variables: 
      RestoreBuildProjects: '**/*.sln'

    steps:
    # Get the data files that are required for device detection automated system tests.
    - powershell: |
        git lfs install
        if (-Not $?) {
          "ERROR: Failed to install git lft."
          exit 1
        }
        ls

        git config --global --add filter.lfs.required true
        git config --global --add filter.lfs.smudge "git-lfs smudge -- %f"
        git config --global --add filter.lfs.process "git-lfs filter-process"
        git config --global --add filter.lfs.clean "git-lfs clean -- %f"
      displayName: 'Configure git lfs'
      failOnStderr: true
          
    # Checkout the code from source control.
    - checkout: self
      lfs: true
      submodules: recursive

    - task: UseDotNet@2
      displayName: 'Use .NET 6.0'
      inputs:
        packageType: sdk
        version: 6.0.x

    # Restore NuGet packages using the dotnet core CLI.
    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet Packages'
      retryCountOnTaskFailure: 3
      inputs:
        command: 'restore'
        projects: '$(RestoreBuildProjects)'
        feedsToUse: 'select'
        vstsFeed: '$(InternalFeedId)'

    # Build the package using the dotnet CLI.
    - task: DotNetCoreCLI@2
      displayName: 'Build Solutions'
      inputs:
        command: 'build'
        projects: '$(RestoreBuildProjects)'
        arguments: '-c $(BuildConfiguration)'

    # Run the cloud unit tests using the dotnet CLI. 
    - task: DotNetCoreCLI@2
      displayName: 'Dotnet Test'
      inputs:
        command: 'test'
        projects: '**/[Tt]ests/**/*.csproj'
        arguments: '-c $(BuildConfiguration)'
    - script: |
        cd performance-tests
        sudo apt-get update
        sudo apt-get install cmake apache2-dev libapr1-dev libaprutil1-dev
        mkdir build
        cd build
        cmake ..
        cmake --build .
        cd ..
      displayName: 'Build Performance Tests'

    - script: |
        cd performance-tests/build
        chmod +x runPerf.sh
        ./runPerf.sh
        cd ..
      displayName: 'Run Performance Tests'
      failOnStderr: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact' 