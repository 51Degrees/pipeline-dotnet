parameters:
- name: targetPublishConfig # Target build configuration to publish
  type: string
  default: 'Release'
- name: nugetVersion # NuGet version to use
  type: string
  default: 5.8.0
- name: imageName # Name of the agent to work on
- name: templates

stages:
- stage: CreatePackages

  variables:
    - group: CertificateVariables
    - group: CIAutomation
    # Because we are pulling in a group, we need to define local variables 
    # using the name/value syntax.
    - name: RestoreBuildProjects
      value: '**/*.sln'
      # Projects to be published as NuGet packages.
      # Note the the Web and Web.Framework projects are published as a single package
      # using a nuspec file rather than directly from the project files. Hence they 
      # are excluded here.
    - name: PublishProjects
      value: |
        **/*.csproj
        !**/*[Tt]ests/**/*.csproj
        !**/*[Ee]xamples/**/*.csproj
        !**/FiftyOne.Pipeline.Web.csproj
        !**/FiftyOne.Pipeline.Web.Framework.csproj
      # Access token for the git repository. Used by the git tag task.
    - name: system_accesstoken
      value: $(System.AccessToken)
    - name: FrameworkNuspecFile
      value: '$(System.DefaultWorkingDirectory)/Web Integration/FiftyOne.Pipeline.Web.nuspec'

  jobs:
  - template: shared-git-version-job.yml@${{ parameters.templates }}
    parameters:
      imageName: ${{ parameters.imageName }}

  - job: CreatePackages
    displayName: Create Packages
    dependsOn: Versioning
    condition: and(succeeded(), ne(variables['CreatePackages'], 'Off'))

    variables:
      GitVersionSemVer: $[ dependencies.Versioning.outputs['SetGitVersionVars.GitVersionSemVer'] ]
      GitVersionAssemblyVer: $[ dependencies.Versioning.outputs['SetGitVersionVars.GitVersionAssemblyVer'] ]
      GitVersionAssemblyFileVer: $[ dependencies.Versioning.outputs['SetGitVersionVars.GitVersionAssemblyFileVer'] ]

    pool:
      vmImage: ${{ parameters.imageName }}
    
    steps:
    - bash: |
       git lfs install
       if [ $? != 0 ]; then
         echo "ERROR: Failed to install lfs."
       fi
       ls

       git config --global --add filter.lfs.required true
       git config --global --add filter.lfs.smudge "git-lfs smudge -- %f"
       git config --global --add filter.lfs.process "git-lfs filter-process"
       git config --global --add filter.lfs.clean "git-lfs clean -- %f"
      displayName: 'Configure git lfs'
      failOnStderr: true
      
    # The lines below are needed to allow the pipeline access to the
    # OAuth access token that controls write access to the git repository. 
    # (Required for GitTag task)
    - checkout: self
      lfs: true
      submodules: recursive
      persistCredentials: true
    # Useful snippets for debugging.
    # List all contents of a directory:
    #- script: |
    #    ls -d $(System.ArtifactsDirectory)/*
        
    - task: NuGetToolInstaller@1
      displayName: 'Use NuGet ${{ parameters.nugetVersion }}'
      inputs:
        versionSpec: ${{ parameters.nugetVersion }}

    - task: UseDotNet@2
      displayName: 'Use .NET Core 6.0'
      inputs:
        packageType: sdk
        version: 6.0.x
        performMultiLevelLookup: true

    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      retryCountOnTaskFailure: 3
      inputs:
        command: 'restore'
        restoreSolution: '$(RestoreBuildProjects)'
        feedsToUse: 'select'
        vstsFeed: '$(InternalFeedId)'

    - task: Assembly-Info-NetFramework@2
      inputs:
        Path: '$(Build.SourcesDirectory)'
        FileNames: '**\AssemblyInfo.cs'
        InsertAttributes: false
        FileEncoding: 'auto'
        WriteBOM: false
        Configuration: ''
        VersionNumber: '$(GitVersionAssemblyVer)'
        FileVersionNumber: '$(GitVersionAssemblyFileVer)'
        LogLevel: 'verbose'
        FailOnWarning: false
        DisableTelemetry: false

    - task: VSBuild@1
      inputs:
        solution: '$(RestoreBuildProjects)'
        vsVersion: '15.0'
        msbuildArgs: '/p:Version=$(GitVersionSemVer)'
        platform: 'Any CPU'
        configuration: '${{ parameters.targetPublishConfig }}'
        clean: true
        msbuildArchitecture: 'x86'
    
    # Index and publish symbol file to allow debugging.
    - task: PublishSymbols@2
      displayName: 'Publish Symbols'
      inputs: 
        SearchPattern: '**/bin/**/*.pdb'
        SymbolServerType: 'TeamServices'
        SymbolsVersion: '$(GitVersionSemVer)'
      condition: and(succeeded(), eq('${{ parameters.targetPublishConfig }}', 'Debug'))
    
    # The nuget package version uses the GitVersionSemVer variable.
    # This has been set by the GitVersion task above. 
    - task: DotNetCoreCLI@2
      displayName: 'Build NuGet Package'
      inputs:
        command: 'custom'
        projects: $(PublishProjects)
        custom: 'pack'
        arguments: '--output $(System.ArtifactsDirectory) --configuration ${{ parameters.targetPublishConfig }} /p:PackageVersion=$(GitVersionSemVer) /p:Version=$(GitVersionSemVer)'

    # The Web and Web.Framework projects are combined into a single NuGet package.
    # This requires the use of a nuspec file and the NuGet task.    
    - task: NuGetCommand@2
      displayName: 'NuGet pack Pipeline.Web'
      inputs:
        command: 'custom'
        arguments: 'pack "$(FrameworkNuspecFile)" -NonInteractive -OutputDirectory $(System.ArtifactsDirectory) -Properties config=${{ parameters.targetPublishConfig }} -version $(GitVersionSemVer) -Verbosity Detailed'

    - template: dotnet/shared-code-signing-steps.yml@${{ parameters.templates }}
      parameters:
        codeSigningPassword: $(CodeSigningCertPassword)
      
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()
      
  - template: shared-git-tag-job.yml@${{ parameters.templates }}
    parameters:
      imageName: ${{ parameters.imageName }}
      jobDependencies: [Versioning,CreatePackages]
      publishConfig: '${{ parameters.targetPublishConfig }}'