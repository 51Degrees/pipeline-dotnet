/* *********************************************************************
 * This Original Work is copyright of 51 Degrees Mobile Experts Limited.
 * Copyright 2020 51 Degrees Mobile Experts Limited, 5 Charlotte Close,
 * Caversham, Reading, Berkshire, United Kingdom RG4 7BY.
 *
 * This Original Work is licensed under the European Union Public Licence (EUPL) 
 * v.1.2 and is subject to its terms as set out below.
 *
 * If a copy of the EUPL was not distributed with this file, You can obtain
 * one at https://opensource.org/licenses/EUPL-1.2.
 *
 * The 'Compatible Licences' set out in the Appendix to the EUPL (as may be
 * amended by the European Commission) shall be deemed incompatible for
 * the purposes of the Work and the provisions of the compatibility
 * clause in Article 5 of the EUPL shall not apply.
 * 
 * If using the Work as, or as part of, a network application, by 
 * including the attribution notice(s) required under Article 5 of the EUPL
 * in the end user terms of the application under an appropriate heading, 
 * such notice(s) shall fulfill the requirements of that article.
 * ********************************************************************* */

// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace FiftyOne.Pipeline.JavaScriptBuilder.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Workspace\Pipeline\cloud-dotnet\pipeline-dotnet\FiftyOne.Pipeline.Elements\FiftyOne.Pipeline.JavaScriptBuilderElement\Templates\JavaScriptResource.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class JavaScriptResource : JavaScriptResourceBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\nfiftyoneDegreesManager = function() {\r\n    \'use-strict\';\r\n    var json = ");
            
            #line 9 "D:\Workspace\Pipeline\cloud-dotnet\pipeline-dotnet\FiftyOne.Pipeline.Elements\FiftyOne.Pipeline.JavaScriptBuilderElement\Templates\JavaScriptResource.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_jsonObject));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n    // Log any errors returned in the JSON object.\r\n    if(json.error !== un" +
                    "defined){\r\n        console.log(json.error);\r\n    }\r\n");
            
            #line 15 "D:\Workspace\Pipeline\cloud-dotnet\pipeline-dotnet\FiftyOne.Pipeline.Elements\FiftyOne.Pipeline.JavaScriptBuilderElement\Templates\JavaScriptResource.tt"
 if (!_supportsPromises) { 
            
            #line default
            #line hidden
            this.Write("\r\n    // Set to true when process is called.\r\n    var started = false;\r\n\r\n");
            
            #line 20 "D:\Workspace\Pipeline\cloud-dotnet\pipeline-dotnet\FiftyOne.Pipeline.Elements\FiftyOne.Pipeline.JavaScriptBuilderElement\Templates\JavaScriptResource.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    // Set to true when the JSON object is complete.\r\n    var completed = false;\r" +
                    "\n    \r\n    // changeFuncs is an array of functions. When onChange is called and " +
                    "passed \r\n    // a function, the function is registered and is called when proces" +
                    "sing is\r\n    // complete.\r\n    var changeFuncs = [];\r\n    \r\n    // Counter is us" +
                    "ed to count how many pieces of callbacks are expected. Every\r\n    // time the co" +
                    "mpletedCallback method is called, the counter is decremented \r\n    // by 1. The " +
                    "counter\'s initial value is 1 as the method is always called \r\n    // once to con" +
                    "tinue execution.\r\n    var callbackCounter = 1;\r\n\r\n    // startsWith polyfill.\r\n " +
                    "   var startsWith = function(source, searchValue){\r\n        return source.lastIn" +
                    "dexOf(searchValue, 0) === 0;\r\n    }\r\n\r\n    // Get cookies with the \'51D_\' prefix" +
                    " that have been added to the request\r\n    // and return the data as key value pa" +
                    "irs. This method is needed to extract\r\n    // cookie values for inclusion in the" +
                    " GET or POST request for situations\r\n    // where CORS will prevent cookies bein" +
                    "g sent to third parties.\r\n    var getFodCookies = function(){\r\n        var keyVa" +
                    "luePairs = document.cookie.split(/; */);\r\n        var fodCookies = [];\r\n        " +
                    "for(var i = 0; i < keyValuePairs.length; i++) {\r\n            var name = keyValue" +
                    "Pairs[i].substring(0, keyValuePairs[i].indexOf(\'=\'));\r\n            if(startsWith" +
                    "(name, \"51D_\")){\r\n                var value = keyValuePairs[i].substring(keyValu" +
                    "ePairs[i].indexOf(\'=\')+1);\r\n                fodCookies[name] = value;\r\n         " +
                    "   }\r\n        }\r\n        return fodCookies;\r\n    };\r\n\r\n    // Extract key value " +
                    "pairs from the \'51D_\' prefixed cookies and concatenates\r\n    // them to form a q" +
                    "uery string for the subsequent json refresh.\r\n    var getParametersFromCookies =" +
                    " function(){\r\n        var fodCookies = getFodCookies();\r\n        var keyValuePai" +
                    "rs = [];\r\n        for (var key in fodCookies) {\r\n            if (fodCookies.hasO" +
                    "wnProperty(key)) {\r\n                keyValuePairs.push(key+\"=\"+fodCookies[key]);" +
                    "\r\n            }\r\n        }\r\n        return keyValuePairs;\r\n    };\r\n\r\n    // Dele" +
                    "te a cookie. \r\n    function deleteCookie(name) {\r\n        document.cookie = name" +
                    " + \'=; expires=Thu, 01 Jan 1970 00:00:01 GMT;\';\r\n    }\r\n\r\n\t// Fetch a value safe" +
                    "ly from the json object. If a key somewhere down the\r\n\t// \'.\' separated hierarch" +
                    "y of keys is not present then \'undefined\' is\r\n\t// returned rather than letting a" +
                    "n exception occur.\r\n\tvar getFromJson = function(key) {\r\n        var result = und" +
                    "efined;\r\n        if (typeof(key) === \'string\') {\r\n            var functions = js" +
                    "on;\r\n            var segments = key.split(\'.\');\r\n            var i = 0;\r\n       " +
                    "     while (functions !== undefined && i < segments.length) {\r\n                f" +
                    "unctions = functions[segments[i++]];\r\n            }\r\n            if (typeof(func" +
                    "tions) === \"string\") {\r\n                result = functions;\r\n            }\r\n    " +
                    "    }\r\n        return result;\r\n    }\r\n    \r\n    // Executed at the end of the pr" +
                    "ocessJSproperties method or for each piece \r\n    // of JavaScript which has 51D " +
                    "code injected. When there are 0 pieces of \r\n    // JavaScript left to process th" +
                    "en reload the JSON object.\r\n    var completedCallback = function(resolve, reject" +
                    "){\r\n        callbackCounter--;\r\n        if (callbackCounter === 0){\r\n           " +
                    " processRequest(resolve, reject);\r\n        } else if (callbackCounter < 0){\r\n   " +
                    "         reject(\'Too many callbacks.\');\r\n        }       \r\n    }\r\n\r\n    // Execu" +
                    "tes any Javascript contained in the json data. Sets the processedJs\r\n    // flag" +
                    " to true when there is no further Javascript to be processed.\r\n    var processJS" +
                    "properties = function(resolve, reject) {\r\n        if (json.javascriptProperties " +
                    "!== undefined){\r\n            if (json.javascriptProperties.length > 0) {\r\n\r\n    " +
                    "            // Execute each of the Javascript property code snippets using the \r" +
                    "\n                // index of the value to access the value to avoid problems wit" +
                    "h\r\n                // JavaScript returning erroneous values.\r\n                fo" +
                    "r(var index = 0;\r\n                    index < json.javascriptProperties.length;\r" +
                    "\n                    index++) {\r\n\r\n                    var name = json.javascrip" +
                    "tProperties[index];\r\n                    \r\n                    // Create new fun" +
                    "ction bound to this instance and execute it.\r\n                    // This is nee" +
                    "ded to ensure the scope of the function is \r\n                    // associated w" +
                    "ith this instance if any members are altered or\r\n                    // added. A" +
                    "voids global scoped variables.\r\n                    var body = getFromJson(name)" +
                    ";\r\n\r\n                    if (body !== undefined) {\r\n                        var " +
                    "func = undefined;\r\n                        var searchString = \'// 51D replace th" +
                    "is comment with callback function.\';\r\n                        \r\n                " +
                    "        if(body.indexOf(searchString) !== -1){\r\n                            call" +
                    "backCounter++;\r\n                            body = body.replace(/\\/\\/ 51D replac" +
                    "e this comment with callback function./g, \'callbackFunc(resolveFunc, rejectFunc)" +
                    ";\');\r\n                            func = new Function(\'callbackFunc\', \'resolveFu" +
                    "nc\', \'rejectFunc\',\r\n\t\t\t\t\t\t\t    \"try {\\n\" +\r\n\t\t\t\t\t\t\t    body + \"\\n\" +\r\n\t\t\t\t\t\t\t   " +
                    " \"} catch (err) {\\n\" +\r\n\t\t\t\t\t\t\t    \"console.log(err);\" +\r\n\t\t\t\t\t\t\t    \"}\"\r\n\t\t\t\t\t\t" +
                    "    );\r\n                            func(completedCallback, resolve, reject);\r\n " +
                    "                       } else {\r\n                            func = new Function" +
                    "(\r\n\t\t\t\t\t\t\t    \"try {\\n\" +\r\n\t\t\t\t\t\t\t    body + \"\\n\" +\r\n\t\t\t\t\t\t\t    \"} catch (err) {" +
                    "\\n\" +\r\n\t\t\t\t\t\t\t    \"console.log(err);\" +\r\n\t\t\t\t\t\t\t    \"}\"\r\n\t\t\t\t\t\t    );\r\n         " +
                    "                   func();\r\n                        }\r\n                    }\r\n  " +
                    "              }\r\n            }\r\n        }\r\n        completedCallback(resolve, re" +
                    "ject);\r\n    };\r\n\r\n    // Standard method to create a CORS HTTP request ready to " +
                    "send data.\r\n    var createCORSRequest = function(method, url) {\r\n        var xhr" +
                    " = new XMLHttpRequest();\r\n        if (\"withCredentials\" in xhr) {\r\n\r\n           " +
                    " // Check if the XMLHttpRequest object has a \"withCredentials\" \r\n            // " +
                    "property.\r\n            // \"withCredentials\" only exists on XMLHTTPRequest2 objec" +
                    "ts.\r\n            xhr.open(method, url, true);\r\n        } else if (typeof XDomain" +
                    "Request != \"undefined\") {\r\n\r\n            // Otherwise, check if XDomainRequest.\r" +
                    "\n            // XDomainRequest only exists in IE, and is IE\'s way of making CORS" +
                    " \r\n            // requests.\r\n            xhr = new XDomainRequest();\r\n          " +
                    "  xhr.open(method, url);\r\n        } else {\r\n\r\n            // Otherwise, CORS is " +
                    "not supported by the browser.\r\n            xhr = null;\r\n        }\r\n        retur" +
                    "n xhr;\r\n    };\r\n\r\n    // Check if the JSON object still has any JavaScript snipp" +
                    "ets to run.\r\n\tvar hasJSFunctions = function() {\r\n\t\tfor (var i = i; i < json.java" +
                    "scriptProperties; i++) {\r\n\t\t\tvar body = getFromJson(json.javascriptProperties[i]" +
                    ");\r\n\t\t\tif (body !== undefined && body.length > 0) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}" +
                    "\r\n\t\treturn false;\r\n\t}\r\n\r\n    // Process the JavaScript properties.\r\n    var proc" +
                    "ess = function(resolve, reject){\r\n        processJSproperties(resolve, reject);\r" +
                    "\n    }\r\n\r\n    // Sends the cookie parameters that have been set by the executed " +
                    "Javascript\r\n    // in the POST body of a new request to refresh the json data. R" +
                    "esolve is\r\n    // called with the new json if the request is processed as expect" +
                    "ed. Reject\r\n    // is called if there was a problem. The parameters are send as " +
                    "a POST \r\n    // request so that encoding and data length issues are minimised.\r\n" +
                    "    var processRequest = function(resolve, reject){\r\n        // Request URL with" +
                    " a license key and User-Agent if provided.\r\n        var xhr = createCORSRequest(" +
                    "\'POST\', \'");
            
            #line 206 "D:\Workspace\Pipeline\cloud-dotnet\pipeline-dotnet\FiftyOne.Pipeline.Elements\FiftyOne.Pipeline.JavaScriptBuilderElement\Templates\JavaScriptResource.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_url));
            
            #line default
            #line hidden
            this.Write("\');\r\n        \r\n        // If there is no support for HTTP requests then call reje" +
                    "ct and throw \r\n        // a no CORS support error.\r\n        if (!xhr) {\r\n       " +
                    "     reject(Error(xhr.statusText));\r\n            throw new Error(\'CORS not suppo" +
                    "rted\');\r\n        }\r\n\r\n        // Add the HTTP header for POST form data.\r\n      " +
                    "  xhr.setRequestHeader(\'Content-Type\', \'application/x-www-form-urlencoded\');\r\n  " +
                    "      \r\n        xhr.onload = function () {\r\n\r\n            // Get the response bo" +
                    "dy from the request.            \r\n            var responseText = xhr.responseTex" +
                    "t;\r\n\r\n            // Process the response as json and call the resolve method.\r\n" +
                    "            json = JSON.parse(responseText);\r\n\t\t\tfor (var i = 0; i < changeFuncs" +
                    ".length; i++) {\r\n\t\t\t\tif (typeof changeFuncs[i] === \'function\' &&\r\n\t\t\t\t\tchangeFun" +
                    "cs[i].length === 1) {\r\n\t\t\t\t\tchangeFuncs[i](json);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (hasJSFunc" +
                    "tions()) {\r\n\t\t\t\tprocess(resolve, reject);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tresolve(json);\r\n" +
                    "                var fodCookies = getFodCookies();\r\n                for (var key " +
                    "in fodCookies) {\r\n                    if (fodCookies.hasOwnProperty(key)) {\r\n   " +
                    "                     deleteCookie(key);\r\n                    }\r\n                " +
                    "}\r\n\t\t\t}\r\n        };\r\n\r\n        xhr.onerror = function () {\r\n            // An er" +
                    "ror occurred with the request. Return the details in the \r\n            // call t" +
                    "o reject method.\r\n            reject(Error(xhr.statusText));\r\n        };\r\n\r\n    " +
                    "    // Get additional parameters from cookies in case they are not sent \r\n      " +
                    "  // by the browser.\r\n\t\tvar params = getParametersFromCookies();\r\n\r\n        // S" +
                    "end the cookie parameters as the POST body.\r\n\t\txhr.send(params.join(\'&\').replace" +
                    "(/%20/g, \'+\'));\r\n    }\r\n\r\n    // Function logs errors, used to \'reject\' a promis" +
                    "e or for error callbacks.\r\n    var catchError = function(value) {\r\n        conso" +
                    "le.log(value);\r\n    }\r\n\r\n    // Populate this instance of the FOD object with ge" +
                    "tters to access the \r\n\t// properties. If the value is null then get the noValueM" +
                    "essage from the\r\n\t// JSON object corresponding to the property.\r\n    var update " +
                    "= function(data){\r\n\t\tvar self = this;\r\n\t\tObject.getOwnPropertyNames(data).forEac" +
                    "h(key => {\r\n\t\t\tself[key] = {};\r\n\t\t\tfor(var i in data[key]){\r\n\t\t\t\tvar obj = self[" +
                    "key];\t\r\n\t\t\t\t(function(i) {\r\n\t\t\t\t\tObject.defineProperty(obj, i, {\r\n\t\t\t\t\t\tget: fun" +
                    "ction (){\r\n\t\t\t\t\t\t\tif(data[key][i] === null && (i !== \"javascriptProperties\" || i" +
                    " !== \"nullValueReasons\")){\r\n\t\t\t\t\t\t\t\treturn data.nullValueReasons[key+\'.\'+i];\r\n\t\t" +
                    "\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\treturn data[key][i];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t})(" +
                    "i);\r\n\t\t\t}\r\n\t\t});\r\n    }\r\n\r\n");
            
            #line 288 "D:\Workspace\Pipeline\cloud-dotnet\pipeline-dotnet\FiftyOne.Pipeline.Elements\FiftyOne.Pipeline.JavaScriptBuilderElement\Templates\JavaScriptResource.tt"
 if (_supportsPromises) { 
            
            #line default
            #line hidden
            this.Write("    this.promise = new Promise(function(resolve, reject) {\r\n        process(resol" +
                    "ve,reject);\r\n    });\r\n\r\n\tthis.onChange = function(resolve) {\r\n\t\tchangeFuncs.push" +
                    "(resolve);\r\n\t}\r\n");
            
            #line 296 "D:\Workspace\Pipeline\cloud-dotnet\pipeline-dotnet\FiftyOne.Pipeline.Elements\FiftyOne.Pipeline.JavaScriptBuilderElement\Templates\JavaScriptResource.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\tthis.onChange = function(resolve) {\r\n\t\tchangeFuncs.push(resolve);\r\n        if(st" +
                    "arted === false){\r\n            process(resolve, catchError);\r\n            starte" +
                    "d = true;\r\n        }\r\n\t}\r\n");
            
            #line 304 "D:\Workspace\Pipeline\cloud-dotnet\pipeline-dotnet\FiftyOne.Pipeline.Elements\FiftyOne.Pipeline.JavaScriptBuilderElement\Templates\JavaScriptResource.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n    this.complete = function(resolve) {\r\n        if(completed){\r\n            re" +
                    "solve(this);\r\n        }else{\r\n            var parent = this;\r\n");
            
            #line 311 "D:\Workspace\Pipeline\cloud-dotnet\pipeline-dotnet\FiftyOne.Pipeline.Elements\FiftyOne.Pipeline.JavaScriptBuilderElement\Templates\JavaScriptResource.tt"
 if (_supportsPromises) { 
            
            #line default
            #line hidden
            this.Write(@"            this.promise.then(function(value) {
                // JSON has been updated so replace the current instance.
                update.call(parent, value);
                resolve(parent);
                completed = true;
            }).catch(catchError);
");
            
            #line 318 "D:\Workspace\Pipeline\cloud-dotnet\pipeline-dotnet\FiftyOne.Pipeline.Elements\FiftyOne.Pipeline.JavaScriptBuilderElement\Templates\JavaScriptResource.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("            process(resolve, catchError);\r\n");
            
            #line 320 "D:\Workspace\Pipeline\cloud-dotnet\pipeline-dotnet\FiftyOne.Pipeline.Elements\FiftyOne.Pipeline.JavaScriptBuilderElement\Templates\JavaScriptResource.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        }\r\n    };\r\n\r\n    // Update this instance with the initial JSON payload.\r\n" +
                    "    update.call(this, json);\r\n\r\n\r\n}\r\n\r\nvar ");
            
            #line 330 "D:\Workspace\Pipeline\cloud-dotnet\pipeline-dotnet\FiftyOne.Pipeline.Elements\FiftyOne.Pipeline.JavaScriptBuilderElement\Templates\JavaScriptResource.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_objName));
            
            #line default
            #line hidden
            this.Write(" = new fiftyoneDegreesManager();");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class JavaScriptResourceBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
